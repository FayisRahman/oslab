//fork
print "fork";
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

alias userSP R0;
userSP = SP;


[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]* 16 + 11] * 512 - 1;

//first we get new pid using getpcbentry from MOD_1
multipush(R0);
R1 = 1; //getpcbentry
call MOD_1; //process manager

alias newPID R1;
newPID = R0;

multipop(R0);

if(newPID == -1) then //to pid left means that currently 16 (max no. of process) processes are running in the OS
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    [[PTBR + 2 * ((userSP - 1)/512)] * 512 + (userSP - 1) % 512] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

else

    if([PTBR + 4] == -1) then //no heap for parent process
        multipush(R0,R1);
        R1 = 1;
        call MOD_2;
        [PTBR + 4] = R0;
        [PTBR + 5] = "0110";

        R1 = 1;
        call MOD_2;
        [PTBR + 6] = R0;
        [PTBR + 7] = "0110";
        multipop(R0,R1);
    endif;
    //now child process need two stack pages and one user area page

    alias new_PTBR R2;
    new_PTBR = PAGE_TABLE_BASE + newPID * 20;

    multipush(R1,R2);
    R1 = 1;
    call MOD_2;
    multipop(R1,R2);
    [new_PTBR + 16] = R0;
    [new_PTBR + 17] = "0110";

    multipush(R1,R2);
    R1 = 1;
    call MOD_2;
    multipop(R1,R2);
    [new_PTBR + 18] = R0;
    [new_PTBR + 19] = "0110";

    //now for user area page
    multipush(R1,R2);
    R1 = 1;
    call MOD_2;
    multipop(R1,R2);
    [PROCESS_TABLE + newPID * 16 + 11] = R0; //USER AREA PAGE NUMBER 

    //now to initialise the process table we need to copy some values from teh parent process table

    [PROCESS_TABLE + newPID * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3]; //USERID
    [PROCESS_TABLE + newPID * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6]; //SWAP FLAG
    [PROCESS_TABLE + newPID * 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10]; //User Area Swap STATUS
    [PROCESS_TABLE + newPID * 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7]; //INODE INDEX
    [PROCESS_TABLE + newPID * 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]; //UPTR


    //setting some other fields

    [PROCESS_TABLE + newPID * 16 + 0] = 0; //TICK
    [PROCESS_TABLE + newPID * 16 + 9] = 0; //MODE FLAG
    [PROCESS_TABLE + newPID * 16 + 12] = 0; //KPTR
    [PROCESS_TABLE + newPID * 16 + 2] = [SYSTEM_STATUS_TABLE + 1]; //PPID
    [PROCESS_TABLE + newPID * 16 + 4] = CREATED; //STATE

    //user area page number already set above
    //pid,PTBR,PTLR already set through getPcbEntry


    //copying per process resource table

    alias i R3;
    i =  512 - 16;

    alias entry R4;
    while(i < 512) do
        entry = [PROCESS_TABLE + newPID * 16 + 11] * 512 + i;
        [entry] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i];
        [entry + 1] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i + 1];
        if([entry] == SEMAPHORE) then
            [SEMAPHORE_TABLE + 4 * [entry + 1] + 1] = [SEMAPHORE_TABLE + 4 * [entry + 1] + 1] + 1;
        endif;
        i = i + 2;

    endwhile;

    //copy per process disk map table

    i = 0;
    while(i<10) do

        [DISK_MAP_TABLE + newPID * 10 + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
        i = i + 1;

    endwhile;


    //copying some page table contents (lib,heap,code)

    i=0;
    while(i<16) do
        [new_PTBR + i] = [PTBR + i];
        [new_PTBR + i + 1] = [PTBR + i + 1];
        if([new_PTBR + i] != -1) then
            [MEMORY_FREE_LIST + [new_PTBR + i]] = [MEMORY_FREE_LIST + [new_PTBR + i]] + 1;
        endif;
        i = i + 2;
    endwhile;


    //copying user stack

    i = 16;
    alias j R4;
    j = 0;

    while(i<20) do
        j = 0;
        while(j<512) do
            [[new_PTBR + i] * 512 + j] = [[PTBR + i] * 512 + j];
            j = j + 1;
        endwhile;
        i = i + 2;
    endwhile;

    
    [[PROCESS_TABLE + newPID * 16 + 11] * 512] = BP;


    //setting up return values (if child then return value is 0 and if parent the nreturn value is the PID of tje child)
    userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

    //parent process
    [[PTBR + 2 * ((userSP-1)/512)] * 512 + ((userSP - 1) % 512)] = newPID;

    //child process

    [[new_PTBR + 2 * ((userSP-1)/512)] * 512 + ((userSP - 1) % 512)] = 0;


    //resetting mode flag and returning to parent process

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
endif;

print "forking done";
ireturn;

