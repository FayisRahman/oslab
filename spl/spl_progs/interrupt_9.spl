//exec system call
print "Exec";
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

alias userSP R0;
userSP = SP;


SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;


alias physicalPageNum R1;
alias offset R2;
alias fileName R3;
alias page_table R5;

page_table = PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1];


physicalPageNum = [PTBR + 2 * ((userSP - 4 ) / 512)];
offset = (userSP - 4) % 512;

fileName = [physicalPageNum * 512 + offset];

alias i R4;
//finding the file using inode table
i = 0;
while(i < MAX_FILE_NUM) do
                                
    if([INODE_TABLE + i * 16 + 1] == fileName && [INODE_TABLE + i * 16 + 0] == EXEC) then //filename and filetype respectively
        break;
    endif;
    i = i + 1;

endwhile;

if(i == MAX_FILE_NUM) then

    alias physicalAddrRetVal R5;
    physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1)/512)] * 512)  + ((userSP-1) % 512);
    [physicalAddrRetVal] = -1;

    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;

endif;

//calling the exit process to terminate the current process
alias inodeIndex R9;
inodeIndex = i;

multipush(R0,R1,R2,R3,R4,R5,R9);

alias arg1 R1;
alias arg2 R2;

arg1 = 3; //exit process
arg2 = [SYSTEM_STATUS_TABLE + 1];

call PROCESS_MANAGER;

multipop(R0,R1,R2,R3,R4,R5,R9);

alias userAreaPage R6;
userAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];

[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1; //incresing the no.of process using this mem page

[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; //decrease MEM_FREE_COUNT

SP = userAreaPage * 512 - 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = inodeIndex;

//allocating new pages for the process

//setting the library pages
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//setting the heap pages
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//stack pages
multipush(R0,R1,R2,R3,R4,R5,R6,R9);

arg1 = 1; //for get free page
call MEMORY_MANAGER;
[PTBR + 16] = R0;
[PTBR + 17] = "0110";

arg1 = 1; //for get free page
call MEMORY_MANAGER;
[PTBR + 18] = R0;
[PTBR + 19] = "0110";

multipop(R0,R1,R2,R3,R4,R5,R6,R9);

//----setting up the disk map table-----
//In this what we really want it the code pages disk location so that information will be available in the inode table entry of that process
//so that we can load the pages from disk to memory when needed
//so we are setting the disk map table entry for the code pages


alias diskMapTable R11;
diskMapTable = DISK_MAP_TABLE + 10 * [SYSTEM_STATUS_TABLE + 1];

alias inodeEntry R10;
inodeEntry = INODE_TABLE + inodeIndex * 16;

alias codeSize R7;
codeSize = (([INODE_TABLE + inodeIndex * 16 + 2] - 1) / 512) + 1;


i=2;
while(i<10) do
    if(i >= 4 && i <= 7 && i <= (4 + codeSize - 1)) then //here codeSize - 1 means like if codeSize was 2 then we need to load 2 pages so we need to load from 4 to 5 so we are doing it that way
        [diskMapTable + i] = [inodeEntry + 8 + (i-4)]; //the usage of i-4 is because we want the i to start from 0 so that it starts from inodeEntry + 8 thats why we are doing it that way
    else
        [diskMapTable + i] = -1;
    endif;
    i = i + 1;
endwhile;



i = 0;

while(i<4) do
    if(i == 0) then
        multipush(R1,R2,R3,R4,R5,R6,R7,R9,R10,R11);

        arg1 = 5; //for get code page
        arg2 = [INODE_TABLE + inodeIndex * 16 + 8 + i];

        call MEMORY_MANAGER;

        multipop(R1,R2,R3,R4,R5,R6,R7,R9,R10,R11);
        [PTBR + 8 + 2 * i] = R0; 
        [PTBR + 9 + 2 * i] = "0100";
    else
        [PTBR + 8 + 2 * i] = -1;
        [PTBR + 9 + 2 * i] = "0000";
    endif;
    i = i + 1;
endwhile;


alias perProcessTable R8;
perProcessTable = userAreaPage  * 512 + RESOURCE_TABLE_OFFSET;

i = 0;
while(i<16) do
    [perProcessTable + i] = -1;
    i = i + 2;
endwhile;



[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];



SP = 8*512;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

breakpoint;

ireturn;



