//resource manager
alias functionNum R1;


// Acquire Disk
if (functionNum == 3) then
    alias currentPID R2;
    while ([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
        multipush(R1, R2);
        call MOD_5;
        multipop(R1, R2);
    endwhile;
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;

//accquire inode
if(functionNum == 4) then

    alias inodeNum R2;
    alias currentPID R3;

    alias i R4;
    i = 0;
    while( [FILE_STATUS_TABLE + i * 4] != -1 ) do
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_FILE;
        [PROCESS_TABLE + currentPID * 16 + 5] = inodeNum;
        multipush(R1, R2, R3);
        call SCHEDULER;
        multipop(R1, R2, R3);
    endwhile ;

    //checking if file is deleted or not
    if( [INODE_TABLE + inodeNumber * 16 + 1] == -1 ) then
        R0 = -1;
    else
        [FILE_STATUS_TABLE + i * 4] = currentPID;
        R0 = 0;
    endif;

    return;

endif;

//release inode
if(functionNum == 5) then

    alias inodeNum R2;
    alias currentPID R3;

    if( [FILE_STATUS_TABLE + inodeNum * 4] != currentPID ) then
        R0 = -1;
        return;
    else
       [FILE_STATUS_TABLE + inodeNum * 4] = -1;
    endif ;

    alias i R4;
    i = 0;
    while( [PROCESS_TABLE + currentPID * 16 + 4] == WAIT_FILE && [PROCESS_TABLE + currentPID * 16 + 5] == inodeNum) do
        [PROCESS_TABLE + currentPID * 16 + 4] = READY;
    endwhile ;

    return;
    
endif;

// acquire semaphore
if (functionNum == 6) then 
    alias i R3;
    i = 0;
    while(i < MAX_SEM_COUNT && [SEMAPHORE_TABLE + 4 * i + 1] != 0) do
        i = i + 1;
    endwhile;

    if (i == MAX_SEM_COUNT) then
        R0 = -1;
    else
        [SEMAPHORE_TABLE + 4 * i] = -1;
        [SEMAPHORE_TABLE + 4 * i + 1] = 1;
        R0 = i;
    endif;
    return;
endif;

if (functionNum == 7) then // Release semaphore
    alias semId R2;
    alias currentPID R3;

    if (currentPID == [SEMAPHORE_TABLE + semId * 4]) then
        [SEMAPHORE_TABLE + semId * 4] = -1;
        alias i R4;

        i = 0;
        while (i < 16) do
            if ([PROCESS_TABLE + i * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + i * 16 + 5] == semId) then
                [PROCESS_TABLE + i * 16 + 4] = READY;
                [PROCESS_TABLE + i * 16 + 5] = -1;
            endif;
            i = i + 1;
        endwhile;

        [SEMAPHORE_TABLE + 4 * semId + 1] = [SEMAPHORE_TABLE + 4 * semId + 1] - 1;
    endif;
    return;
endif;

// Acquire Terminal
if (functionNum == 8) then
    alias currentPID R2;
    while ([TERMINAL_STATUS_TABLE] != 0) do
        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;
        multipush(R1, R2);

        call MOD_5;

        multipop(R1, R2);
    endwhile;

    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif;

// Release Terminal
if (functionNum == 9) then
    if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
        alias returnValue R0;
        returnValue = -1;
        return; 
    else
        [TERMINAL_STATUS_TABLE] = 0;
        alias i R3;
        i = 0;
        while (i < 16) do
            if ([PROCESS_TABLE + i * 16 + 4] == WAIT_TERMINAL) then
                [PROCESS_TABLE + 16 * i + 4] = READY;
            endif;
            i = i + 1;
        endwhile;
        alias returnValue R0;
        returnValue = 0;
        return;
    endif;
endif;

