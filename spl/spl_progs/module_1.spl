//PROCESS MANAGER MODULE
alias functionNumber R1;
alias currentPID R2;

// free user areaPage
if (functionNumber == 2) then
    alias userAreaPageNumber R3;
    userAreaPageNumber = [PROCESS_TABLE + 16 * currentPID + 11];
    multipush(R1, R2, R3);
    R1 = 2;
    R2 = userAreaPageNumber;
    call MOD_2;
    multipop(R1, R2, R3);

    return;
endif;

// exit process
if (functionNumber == 3) then
    multipush(R1, R2);

    // to free page table
    R1 = 4;
    R2 = currentPID;
    call MOD_1;

    // to free user area page
    R1 = 2;
    R2 = currentPID;
    call MOD_1;

    multipop(R1, R2);

    [PROCESS_TABLE + 16 * currentPID + 4] = TERMINATED;
    return;
endif;

// free page table
if (functionNumber == 4) then
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias i R3;
    alias pageNumber R4;

    i = 1;
    while (i < (PTLR - 1)) do
        pageNumber = [PTBR + 2 + 2 * i];
        if (pageNumber != -1) then
            multipush(R1, R2, R3, R4);

            // to release page
            R1 = 2;
            R2 = pageNumber;
            call MOD_2;

            multipop(R1, R2, R3, R4);

            [PTBR + 2 + 2 * i] = -1;
            [PTBR + 3 + 2 * i] = "0000";
        endif;
        i = i + 1;
    endwhile;

    //here we loop through the disk map table to see which disk blocks were allocated to the stack and heap processes during runtime and which needs to be released
    alias diskMapTable R5;
    diskMapTable = DISK_MAP_TABLE + 10*currentPID;
    i=2;
    while(i<10) do
        if(i < 4 || i > 7) then
            if([diskMapTable + i] != -1) then
                multipush(R1,R2,R3,R4,R5);
                R1 = 4;
                R2 = [diskMapTable + i];
                R3 = currentPID;
                call MOD_2;
                multipop(R1,R2,R3,R4,R5);
                [diskMapTable + i] = -1;
            endif;
        endif;
        i = i + 1;
    endwhile;
    return;
endif;

//get pcb entry
if(functionNumber == 1) then

    R0 = -1;
    alias i R1;
    i = 1;
    while(i<16) do
        if([PROCESS_TABLE + i*16 + 4] == TERMINATED) then
            R0 = i;
            break;
        endif;
        i = i + 1;
    endwhile;

    if(R0 != -1) then
        [PROCESS_TABLE + i * 16 + 1] = i;
        [PROCESS_TABLE + i * 16 + 4] = ALLOCATED;
        [PROCESS_TABLE + i * 16 + 14] = PAGE_TABLE_BASE + i * 20;
        [PROCESS_TABLE + i * 16 + 15] = 10;
    endif;

    return;

endif;