//MEMORY MANAGER MODULE

alias functionNum R1;


//get free page
if(functionNum == 1) then
    
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1; //Wait mem count
    
    while([SYSTEM_STATUS_TABLE + 2] == 0) do //that is until u get a free mem page
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_MEM;
        multipush(R1);
        call MOD_5; //calling scheduler
        multipop(R1);
    endwhile;
    
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1; //Wait mem count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1; //allocated a free page so decrease from total page

    alias memPage R2;
    memPage = 76;

    while([MEMORY_FREE_LIST + memPage] > 0 && memPage < 128) do
        memPage = memPage + 1;
    endwhile;

    [MEMORY_FREE_LIST + memPage] = 1; //allocated to a process

    R0 = memPage;

    print "get free page";

    return;

endif;

//release page
if(functionNum == 2) then
    alias pageNum R2;
    [MEMORY_FREE_LIST + pageNum] = [MEMORY_FREE_LIST + pageNum] - 1; //decrease the page use count
    if([MEMORY_FREE_LIST + pageNum] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1; //increase the free page count
    endif;

    alias pid R3;
    pid = 1;
    while(pid < 16) do
        if([PROCESS_TABLE + pid * 16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + pid * 16 + 4] = READY;
        endif;
        pid = pid + 1;
    endwhile;

    print "release page";

    return;
    
endif;

//release block
if(functionNum == 4) then
    alias blockNumber R2;
    alias currentPID R3;
    
    [DISK_FREE_LIST + blockNumber] = [DISK_FREE_LIST + blockNumber] - 1;
    return;
endif;

//get code page
if(functionNum == 5) then
    print "get code page";
    alias blockNum R2;
    alias diskMapTable R3;
    alias i R4;
    alias j R5;
    alias auxilaryWord R6;
    alias memPageNum R7;
    
    i=0;
    while(i<16) do
        diskMapTable = DISK_MAP_TABLE + i*10;
        j = 0;
        while(j<4) do
            if([diskMapTable + 4 + j] == blockNum) then
                auxilaryWord = [PAGE_TABLE_BASE + i*20 + 9 + 2*j];
                if(auxilaryWord == "0100" || auxilaryWord == "0110" || auxilaryWord == "0101" || auxilaryWord == "0110" || auxilaryWord == "0111" || auxilaryWord == "1100" || auxilaryWord == "1110" || auxilaryWord == "1101" || auxilaryWord == "1111") then
                    memPageNum = [PAGE_TABLE_BASE + i*20 + 8 + j*2];
                    if(memPageNum != - 1) then
                        [MEMORY_FREE_LIST + memPageNum] = [MEMORY_FREE_LIST + memPageNum] + 1;
                        R0 = memPageNum;
                        return;
                    endif;
                endif;  
            endif;
            j = j + 1;
        endwhile;
        i = i + 1;
    endwhile;

    //disk block not found in any process mem page

    multipush(R1,R2,R3,R4,R5,R6,R7);

    functionNum = 1; //to get a memory page to store the disk block diskMapTable
    call MOD_2;

    multipop(R1,R2,R3,R4,R5,R6,R7);

    memPageNum = R0;

    //now since we got the memory page we need to load it from the disk using disk load function using device manager

    multipush(R1,R2,R3,R4,R5,R6,R7);

    functionNum = 2; //disk load
    R4 = blockNum; //block number
    R2 = [SYSTEM_STATUS_TABLE + 1]; //current PID //here why we put R4 before R2 was that we are using R2 for blockNum in this fucntion scope but the parameters of the next funtion which is disk load requires R2 to be currentPID and R4 as block number so first we put R4 = R2 then R2 = currentPID;
    R3 = memPageNum; //page number
     
    call MOD_4;

    multipop(R1,R2,R3,R4,R5,R6,R7);

    //now we have loaded the disk block to the memory page (updating the page table entry is done in the exception handler and no need to worry about it)
    //returning the obtained memory page

    R0 = memPageNum;

    return;

endif;