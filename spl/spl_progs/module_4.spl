//DEVICE MANAGER MODULE

alias functionNum R1;
alias currentPID R2;
alias word R3; //for terminal write


//terminalWrite
if(functionNum == 3) then

    multipush(R1,R2,R3);
    functionNum = 8;
    call MOD_0;
    multipop(R1,R2,R3);

    print word;

    multipush(R1,R2,R3);
    functionNum = 9;
    call MOD_0;
    multipop(R1,R2,R3);

    return;

endif;

//terminalRead
if(functionNum == 4) then

    alias wordAddr R3; //for terminal read

    multipush(R1,R2,R3);
    functionNum = 8;

    //we also need R2 register to contain the PID of the current process as we have done this before call the module 4 we do not have to worry about it now
    //also R3 register need to contain the wordAddr to store the input this also we ahve done before call MOD_4
    
    call MOD_0;
    multipop(R1,R2,R3);

    read;

    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;

    //invoking the resource manager module as we are done using the terminal now so we will release the terminal lock

    multipush(R1,R2,R3);
    call MOD_5;
    multipop(R1,R2,R3);

    alias physicalWordAddr R4;
    physicalWordAddr = ([PTBR + 2 * (wordAddr/512)] * 512) + (wordAddr % 512);

    [physicalWordAddr] = [PROCESS_TABLE + currentPID * 16 + 8];

    
    return;

endif;

//Disk Load
if(functionNum == 2) then
    // breakpoint;
    print "Disk Load";
    alias arg1 R1; //function number
    alias arg2 R2; // PID
    alias pageNumber R3; //pageNumber
    alias blockNumber R4; //block number

    arg1 = 3; //acquire disk
    arg2 = currentPID;

    multipush(R1,R2,R3,R4);
    call MOD_0;
    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE + 1] = 0; //load
    [DISK_STATUS_TABLE + 2] = pageNumber; //page number
    [DISK_STATUS_TABLE + 3] = blockNumber; //block number

    load(pageNumber,blockNumber);

    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

    multipush(R1,R2,R3,R4);
    call MOD_5;
    multipop(R1,R2,R3,R4);

    return;
endif;

//disk store
if(functionNum == 1) then

    alias pageNum R3;
    alias blockNum R4;

    //first we accquire disk
    multipush(R1,R2,R3,R4);
    R1 = 3;
    R2 = currentPID;

    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    [DISK_STATUS_TABLE + 1] = 1; //store
    [DISK_STATUS_TABLE + 2] = pageNum;
    [DISK_STATUS_TABLE + 3] = blockNum;

    store(pageNum,blockNum);

    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;

    multipush(R1,R2,R3,R4);
    call SCHEDULER;
    multipop(R1,R2,R3,R4);

    return;

endif;

//release disk
if(functionNum == 4) then
    //here R2 contains the block number
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif;


